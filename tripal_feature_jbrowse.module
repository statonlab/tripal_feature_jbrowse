<?php
/**
 * @file
 * Provides a pane in the feature page that links features to JBrowse
 * instances for other organisms.
 */

include_once drupal_get_path('module', 'tripal_feature_jbrowse') . '/includes/tripal_feature_jbrowse.form.inc';
include_once drupal_get_path('module', 'tripal_feature_jbrowse') . '/theme/tripal_feature_jbrowse.theme.inc';


/**
 * Implements hook_permission().
 *
 * Define access permissions.
 */
function tripal_feature_jbrowse_permission() {
  $items = [
    'administer feature jbrowse links' => [
      'title' => t('Administer Feature URLs'),
      'description' => t('Manage feature urls per organism.'),
    ],
  ];

  return $items;
}

/**
 * Implements hook_menu().
 *
 * Define menu urls and their callbacks.
 *
 * @return mixed
 */
function tripal_feature_jbrowse_menu() {
  $items['admin/tripal/extension/feature_jbrowse_link'] = [
    'title' => t('Feature JBrowse Link'),
    'description' => t('Manage feature JBrowse links'),
    'page callback' => 'theme',
    'page arguments' => ['tripal_feature_jbrowse_admin'],
    'access arguments' => ['administer feature jbrowse links'],
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['admin/tripal/extension/feature_jbrowse_link/list'] = [
    'title' => t('List'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  ];

  $items['admin/tripal/extension/feature_jbrowse_link/add'] = [
    'title' => t('Add'),
    'description' => t('Add new feature JBrowse link'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_feature_jbrowse_form'],
    'access arguments' => ['administer feature jbrowse links'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  ];

  $items['admin/tripal/extension/feature_jbrowse_link/edit/%'] = [
    'title' => t('Edit'),
    'description' => t('Edit previous submission'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_feature_jbrowse_form', 5],
    'access arguments' => ['administer feature jbrowse links'],
    'type' => MENU_CALLBACK,
    'weight' => 2,
  ];

  $items['admin/tripal/extension/feature_jbrowse_link/delete/%'] = [
    'title' => t('Delete'),
    'description' => t('Delete link'),
    'page callback' => 'tripal_feature_jbrowse_delete',
    'page arguments' => [5],
    'access arguments' => ['administer feature jbrowse links'],
    'type' => MENU_CALLBACK,
    'weight' => 2,
  ];

  return $items;
}


/**
 * Implements hook_node_view().
 *
 * @param $node
 * @param $view_mode
 * @param $langcode
 *
 * @return void
 */
function tripal_feature_jbrowse_node_view($node, $view_mode, $langcode) {
  $type = $node->type;
  if ($view_mode !== 'full' || ($type !== 'chado_feature' && $type !== 'chado_organism')) {
    return;
  }

  $node->content['#tripal_generic_node_template'] = TRUE;

  $organism_id = $type === 'chado_feature' ? $node->feature->organism_id->organism_id : $node->organism->organism_id;

  $record = tripal_feature_jbrowse_get_jbrowse_record($organism_id);

  if ($record) {
    if ($type === 'chado_organism' && !$record->show_in_organism_page) {
      return;
    }
    tripal_feature_jbrowse_parse_link($record, $node);
    $node->content['tripal_feature_jbrowse'] = tripal_feature_jbrowse_render_template($record, $node);
  }
}


/**
 * Render the pane content.
 *
 * @param $record
 *
 * @return array
 */
function tripal_feature_jbrowse_render_template($record, &$node) {

  $description = json_decode($record->description);

  if (isset($description->value) && !empty($description->value)) {
    return [
      //'#title' => $record->title,
      '#tripal_toc_id' => 'tripal_feature_jbrowse',
      '#tripal_toc_title' => $record->title,
      '#markup' => theme('tripal_feature_jbrowse_pane', ['record' => $record]),
      '#weight' => 15,
      '#node' => $node
    ];
  }

  return [
    '#type' => 'link',
    '#title' => "<a href='{$record->link}'>{$record->title}</a>",
    '#href' => $record->link,
    '#weight' => 15,
  ];
}

/**
 * Get the record from the db.
 *
 * @param $organism_id
 *
 * @return mixed
 */
function tripal_feature_jbrowse_get_jbrowse_record($organism_id) {
  return db_query('SELECT * FROM {tripal_feature_jbrowse} WHERE organism_id=:id', [
    ':id' => $organism_id,
  ])->fetchObject();
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 */
function tripal_feature_jbrowse_theme($existing, $type, $theme, $path) {
  $items = [
    'tripal_feature_jbrowse_pane' => [
      'variables' => ['record' => ''],
      'template' => 'tripal_feature_jbrowse_pane',
      'path' => "{$path}/theme/templates",
    ],
    'tripal_feature_jbrowse_admin' => [
      'template' => 'tripal_feature_jbrowse_admin',
      'path' => "{$path}/theme/templates",
    ],
  ];

  return $items;
}

/**
 * Parse jbrowse links to include tracks.
 *
 * @param object $record tripal_feature_jbrowse DB record
 * @param object $node drupal node
 */
function tripal_feature_jbrowse_parse_link(&$record, $node) {
  // Add loc parameters
  if($node->type === 'chado_feature') {
    $record->link .= "&?loc={$node->feature->uniquename}";
    $record->link .= "&highlight={$node->feature->uniquename}";
  }

  if (!empty($record->tracks)) {
    $tracks = json_decode($record->tracks);
    foreach ($tracks as $key => $track) {
      $tracks[$key] = trim($track);
    }

    $tracks = implode(',', $tracks);

    if (strpos($record->link, '?') !== FALSE) {
      $record->link .= "&tracks={$tracks}";
    }
    else {
      $record->link .= "?tracks={$tracks}";
    }
  }
}